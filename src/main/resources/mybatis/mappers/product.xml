<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"../mybatis-3-mapper.dtd">

<mapper namespace="mapper.product">

	<!-- 검색어와 일치하는 상품 중 공개 리스트 조회 -->
	<select id="searchlist" resultType="ProductDTO" parameterType="java.lang.String">
       <![CDATA[
           SELECT * FROM FOODMATE_PRODUCT_VIEW
           WHERE NAME LIKE '%' || #{keyword} || '%'
       ]]>
	</select>
	
	<!-- 전체 상품 중 공개 리스트 조회 -->
	
   <select id="alllist" resultType="ProductDTO">
	    SELECT * FROM
	    FOODMATE_PRODUCT_VIEW
	    WHERE STATUS = 'Y'
	</select>
	
	<!-- 특정 판매자와 일치하는 상품 중 공개 리스트 조회 -->
	<select id="listBySlrId" resultType="ProductDTO" parameterType="java.lang.String">
	    SELECT * FROM FOODMATE_PRODUCT_VIEW
	    WHERE SLR_ID = #{slr_id} AND STATUS = 'Y'
	</select>
	
	<!-- 특정 판매자와 일치하는 모든 상품 리스트 조회(당사자용) -->
	<select id="listBySlrSelf" resultType="ProductDTO" parameterType="java.lang.String">
	    SELECT *
	    FROM FOODMATE_PRODUCT_VIEW
	    WHERE SLR_ID = #{slr_id}
	</select>
	
	<!-- 특정 판매자와 일치하는 모든 상품 리스트 조회(당사자, 재고관리용) -->
	<select id="listForStockBySlrSelf" resultType="ProductDTO">
		SELECT 
		    fpv.*, 
		    (SELECT COUNT(*) 
		     FROM foodmate_order_detail fod 
		     WHERE fod.pdt_id = fpv.pdt_id) AS ord_count
		FROM FOODMATE_PRODUCT_VIEW fpv
		WHERE fpv.SLR_ID = #{slr_id}
	</select>
	
	<!-- 판매자 마이페이지 홈의 내 BEST3 상품 -->
	<select id="myBest3" resultType="ProductDTO">
		<![CDATA[
		SELECT * FROM (
		    SELECT 
		        fpv.*, 
		        (SELECT COUNT(*) 
		         FROM foodmate_order_detail fod 
		         WHERE fod.pdt_id = fpv.pdt_id) AS ord_count
		    FROM FOODMATE_PRODUCT_VIEW fpv
		    WHERE fpv.SLR_ID = #{slr_id}
		    ORDER BY ord_count DESC
		) 
		WHERE ROWNUM <= 3
		]]>
	</select>
	
	<update id="changeStatus">
		UPDATE FOODMATE_PRODUCT
		SET STATUS = #{newStatus}
		WHERE PDT_ID = #{pdt_id}
	</update>
	
	<!-- 조건에 따른 상품 검색 기능 / 단위당 가격 표시 실험중 -->
	<select id="searchlist2" resultType="ProductDTO" parameterType="map">
	    <![CDATA[
        SELECT p.*, 
	       CASE 
	           WHEN p.CATEGORY_ID IS NOT NULL 
	                AND p.QTY IS NOT NULL 
	                AND p.QTY > 0 
	           THEN 
	                CASE 
	                    WHEN p.UNIT = c.RECOMMEND_UNIT THEN p.PRICE / p.QTY
	                    WHEN p.UNIT IN ('L', 'l') AND c.RECOMMEND_UNIT IN ('ml', 'mL') THEN (p.PRICE / p.QTY) / 1000
	                    WHEN p.UNIT IN ('kg', 'KG') AND c.RECOMMEND_UNIT IN ('g', 'G') THEN (p.PRICE / p.QTY) / 1000
	                    ELSE p.PRICE / p.QTY
	                END 
	           ELSE NULL 
	       END AS UNIT_PRICE
		FROM FOODMATE_PRODUCT_VIEW p
		JOIN FOODMATE_SELLER s ON p.SLR_ID = s.SLR_ID
		LEFT JOIN FOODMATE_PRODUCT_CATEGORY c ON p.CATEGORY_ID = c.CATEGORY_ID
		WHERE p.STATUS = 'Y'
	    ]]>
	    
	    <if test="slr_id != null and slr_id != ''">
	        <![CDATA[ AND p.SLR_ID = #{seller_id} ]]>
	    </if>
	    
	    <if test="category_id != null">
	        <![CDATA[ AND p.CATEGORY_ID = #{category_id} ]]>
	    </if>
	    
	    <if test="keyword != null and keyword != ''">
	        <![CDATA[ AND p.NAME LIKE '%' || #{keyword} || '%' ]]>
	    </if>
	    
	    <choose>
	    	<when test="sort == 'price_asc'">
	            <![CDATA[ ORDER BY PRICE ASC]]>
	        </when>
	        <when test="sort == 'price_desc'">
	            <![CDATA[ ORDER BY PRICE DESC]]>
	        </when>
	        <when test="sort == 'unitprice_asc'">
	            <![CDATA[ ORDER BY UNIT_PRICE ASC]]>
	        </when>
	        <when test="sort == 'unitprice_desc'">
	            <![CDATA[ ORDER BY UNIT_PRICE DESC]]>
	        </when>
	        
	        <otherwise>
	            <![CDATA[ ORDER BY p.PDT_ID DESC ]]>
	        </otherwise>
	    </choose>
	    
	</select>
	
	<!-- 특정 상품 조회 -->
	<select id="getPdt" resultType="ProductDTO" parameterType="int">
		<![CDATA[
        SELECT p.*, 
	       CASE 
	           WHEN p.CATEGORY_ID IS NOT NULL 
	                AND p.QTY IS NOT NULL 
	                AND p.QTY > 0 
	           THEN 
	                CASE 
	                    WHEN p.UNIT = c.RECOMMEND_UNIT THEN p.PRICE / p.QTY
	                    WHEN p.UNIT IN ('L', 'l') AND c.RECOMMEND_UNIT IN ('ml', 'mL') THEN (p.PRICE / p.QTY) / 1000
	                    WHEN p.UNIT IN ('kg', 'KG') AND c.RECOMMEND_UNIT IN ('g', 'G') THEN (p.PRICE / p.QTY) / 1000
	                    ELSE p.PRICE / p.QTY
	                END 
	           ELSE NULL 
	       END AS UNIT_PRICE
		FROM FOODMATE_PRODUCT_VIEW p
		JOIN FOODMATE_SELLER s ON p.SLR_ID = s.SLR_ID
		LEFT JOIN FOODMATE_PRODUCT_CATEGORY c ON p.CATEGORY_ID = c.CATEGORY_ID
		WHERE p.STATUS = 'Y' AND p.PDT_ID = #{pdt_id}
	    ]]>
	</select>
	
	<!-- 카테고리 최상위만 가져온다. 상품등록할때 필요 -->
	<select id="getGrandCategory" resultType="CategoryDTO">
	    SELECT CATEGORY_ID, NAME, PARENT_ID
	    FROM FOODMATE_PRODUCT_CATEGORY
	    WHERE PARENT_ID IS NULL
	</select>
	
	<!-- 카테고리를 선택하면 그거에 해당하는 직계자식 카테고리만 가져온다. 상품등록할때 필요 -->
	<select id="getChildCategory" resultType="CategoryDTO" parameterType="java.lang.Integer">
		SELECT *
	    FROM FOODMATE_PRODUCT_CATEGORY
	    WHERE PARENT_ID = #{parent_id}
	</select>

	<!-- 특정 상품의 카테고리를 부모까지 싹 가져온다 -->
	<select id="getCategoryStep" resultType="CategoryDTO">
	    SELECT CATEGORY_ID, NAME
	    FROM FOODMATE_PRODUCT_CATEGORY
	    START WITH CATEGORY_ID = #{category_id}
	    CONNECT BY PRIOR PARENT_ID = CATEGORY_ID
	    ORDER BY LEVEL DESC
	</select>
	
	<select id="getNameById" parameterType="int" resultType="String">
	    SELECT name
	    FROM FOODMATE_PRODUCT
	    WHERE pdt_id = #{pdt_id}
	</select>
	
	<!-- 새 상품 추가 -->
	<insert id="newPdt" parameterType="ProductDTO">
		INSERT INTO FoodMate_Product (PDT_ID, SLR_ID, NAME, IMG_PATH, PRICE, QTY, UNIT, CATEGORY_ID, STOCK, STATUS, DESCRIPTION)
		VALUES (FOODMATE_PRODUCT_SEQ.NEXTVAL, #{slr_id}, #{name}, #{img_path}, #{price}, #{qty}, #{unit}, #{category_id}, #{stock}, #{status}, #{description})
	</insert>
	
	<!-- 새 상품에 설명이미지 넣어주기위해 상품ID 가져오기 -->
	<select id="getLastInsertedPdtId" resultType="int">
	    SELECT pdt_id
		FROM (SELECT pdt_id
		FROM foodmate_product
		ORDER BY pdt_id DESC)
		WHERE ROWNUM = 1
	</select>
	
	<!-- 새 상품 추가할때 상품 설명 이미지들도 추가, 이미지마다 반복 -->
	<insert id="newPdtDescImg">
		INSERT INTO FOODMATE_PRODUCT_DESCIMG (IMG_ID, PDT_ID, IMG_PATH)
		VALUES (FOODMATE_PRODUCT_DESCIMG_SEQ.NEXTVAL, #{pdt_id}, #{img_path})
	</insert>
	
	<update id="editPdt" parameterType="ProductDTO">
	    UPDATE FoodMate_Product
	    SET 
	        NAME = #{name}, IMG_PATH = #{img_path}, PRICE = #{price}, 
	        QTY = #{qty}, UNIT = #{unit}, CATEGORY_ID = #{category_id}, STOCK = #{stock}, 
	        STATUS = #{status}, DESCRIPTION = #{description}
	    WHERE PDT_ID = #{pdt_id}
	</update>
	
	<delete id="deletePdt" parameterType="int">
	    DELETE FROM FoodMate_Product
	    WHERE PDT_ID = #{pdt_id}
	</delete>
	
	<!-- 판매자가 재고 원하는수량으로 업데이트하는 sql문 -->
	<update id="updateStock">
		UPDATE FOODMATE_PRODUCT
		SET STOCK = #{stock}
		WHERE PDT_ID = #{pdt_id}
	</update>
	
	<select id="orderCountOnPdt">
		select count(*) from foodmate_order_detail
		where pdt_id = #{pdt_id}
	</select>
	
	<!-- 상품 하나에 해당하는 설명 이미지들 경로만 가져가는중 -->
	<select id="getDescImgPaths" parameterType="int" resultType="string">
	    SELECT IMG_PATH
	    FROM FOODMATE_PRODUCT_DESCIMG
	    WHERE PDT_ID = #{pdt_id}
	</select>
	
	<!-- 상품 후기 등록 -->
    <insert id="insertProductRating" parameterType="ProductRatingDTO">
        INSERT INTO FOODMATE_PRODUCT_RATING (CMT_PDT_RATING_ID, PDT_ID, BYR_ID, RATING, COMMENTS, CREATE_DATE)
        VALUES (FOODMATE_PRODUCT_RATING_SEQ.NEXTVAL, #{pdt_id}, #{byr_id}, #{rating}, #{comments}, SYSDATE)
    </insert>
	
	<!-- 상품 후기 수정 -->
    <update id="updateProductRating" parameterType="ProductRatingDTO">
        UPDATE FOODMATE_PRODUCT_RATING
        SET RATING = #{rating}, COMMENTS = #{comments}, CREATE_DATE = SYSDATE
        WHERE CMT_PDT_RATING_ID = #{cmt_pdt_rating_id}
    </update>
	
	<!-- 이 구매자가 이 상품을 샀었냐? 4~9가 뭔지는 주문테이블 코드확인 -->
    <select id="isByrConfirmPdt" parameterType="ProductRatingDTO" resultType="int">
    	SELECT count(*)
		FROM foodmate_order o
		JOIN foodmate_order_detail od ON o.ord_id = od.ord_id
		where byr_id = #{byr_id} and pdt_id = #{pdt_id}
		and ord_stat in (4, 5, 6, 7, 8, 9)
    </select>
	
	<select id="isReviewed" parameterType="ProductRatingDTO" resultType="ProductRatingDTO">
		SELECT *
		FROM FOODMATE_PRODUCT_RATING
		WHERE BYR_ID = #{byr_id} AND PDT_ID = #{pdt_id}
	</select>
	
	<!-- 상품 후기 삭제 -->
    <delete id="deleteProductRating" parameterType="int">
        DELETE FROM FOODMATE_PRODUCT_RATING
        WHERE CMT_PDT_RATING_ID = #{cmt_pdt_rating_id}
    </delete>
	
	<!-- 상품 후기 조회 (상품 ID에 해당하는 후기들) -->
    <select id="getProductRatings" resultType="ProductRatingDTO" parameterType="int">
        SELECT CMT_PDT_RATING_ID, PDT_ID, BYR_ID, RATING, COMMENTS, CREATE_DATE
        FROM FOODMATE_PRODUCT_RATING
        WHERE PDT_ID = #{pdt_id}
        ORDER BY CREATE_DATE DESC
    </select>
	
	<!-- 상품ID 넣으면 평균점수 반환, 해당 상품ID로 평점 하나도 작성안되어있으면 null 반환-->
	<select id="selectAvgRatingByProductId" resultType="double">
	    SELECT ROUND(AVG(RATING), 1) AS AVG_RATING -- 소수점 1자리까지 반올림
	    FROM FOODMATE_PRODUCT_RATING
	    WHERE PDT_ID = #{pdtId}
	    GROUP BY PDT_ID
	</select>
	
	
	
	
	
	
	<!-- 밑부터 made by 류세환, 아직안씀 --> 
	
    

    

	<!-- 상품 문의 등록 -->
    <insert id="insertProductQna" parameterType="ProductQnaDTO">
        INSERT INTO FOODMATE_PRODUCT_QNA (CMT_PDT_QNA_ID, PDT_ID, USER_ID, COMMENTS, PARENT_ID, CREATE_DATE)
        VALUES (FOODMATE_PRODUCT_QNA_SEQ.NEXTVAL, #{pdt_id}, #{user_id}, #{comments}, #{parent_id}, SYSDATE)
    </insert>

    <!-- 상품 문의 조회 (상품 ID에 해당하는 문의들) -->
    <select id="getProductQna" resultType="ProductQnaDTO" parameterType="int">
        SELECT CMT_PDT_QNA_ID, PDT_ID, USER_ID, COMMENTS, PARENT_ID, CREATE_DATE
        FROM FOODMATE_PRODUCT_QNA
        WHERE PDT_ID = #{pdt_id}
        ORDER BY CREATE_DATE DESC
    </select>
    
     <!-- 상품 문의 단일 조회 (상품 ID에 해당하는 문의들) -->
    <!-- mapper.product.getProductQnaById 쿼리 -->
<select id="getProductQnaById" parameterType="int" resultType="ProductQnaDTO">
    SELECT * 
    FROM product_qna 
    WHERE cmt_pdt_qna_id = #{qna_id}
</select>

    <!-- 상품 문의 삭제 -->
    <delete id="deleteProductQna" parameterType="int">
        DELETE FROM FOODMATE_PRODUCT_QNA
        WHERE CMT_PDT_QNA_ID = #{cmt_pdt_qna_id}
    </delete>

    <!-- 상품 문의 수정 -->
    <update id="updateProductQna" parameterType="ProductQnaDTO">
        UPDATE FOODMATE_PRODUCT_QNA
        SET COMMENTS = #{comments}, CREATE_DATE = SYSDATE
        WHERE CMT_PDT_QNA_ID = #{cmt_pdt_qna_id}
    </update>
    
    
	
</mapper>