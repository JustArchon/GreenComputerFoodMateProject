<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"../mybatis-3-mapper.dtd">

	<mapper namespace="mapper.member">
		<resultMap id="byrResult" type="buyerDTO">
			<result property="byr_id" column="byr_id" />
		    <result property="password" column="password" />
		    <result property="name" column="name" />
		    <result property="birth_6" column="birth_6" />
		    <result property="sex" column="sex" />
		    <result property="email" column="email" />
		    <result property="phone_num" column="phone_num" />
		</resultMap>
		
		<resultMap id="slrResult" type="sellerDTO">
			<result property="slr_id" column="slr_id" />
		    <result property="password" column="password" />
		    <result property="name" column="name" />
		    <result property="nickname" column="nickname" />
		    <result property="business_no" column="business_no" />
		    <result property="email" column="email" />
		    <result property="phone_num" column="phone_num" />
		</resultMap>
		
		
	<select id="login" resultType="buyerDTO"  parameterType="java.util.Map"  >
	    <![CDATA[
			select * from foodmate_buyer 
			 where byr_id=#{byr_id}
			 and pw=#{password}
		]]>
	</select>
	
	<select id="loginslr" resultType="sellerDTO"  parameterType="java.util.Map"  >
	    <![CDATA[
			select * from foodmate_seller 
			 where slr_id=#{slr_id}
			 and pw=#{password}
		]]>
	</select>
		
	<insert id="insertNewBuyer" parameterType="buyerDTO">
		<![CDATA[
			insert into foodmate_buyer(
					byr_id, 
			        pw, 
			        name, 
			        birth_6, 
			        sex, 
			        email,
			        phone_num, 
			        join_date, 
			        status
		        )values(
			        #{byr_id}, 
			        #{password}, 
			        #{name}, 
			        #{birth_6}, 
			        #{sex}, 
			        #{email}, 
			        #{phone_num}, 
			        DEFAULT,   -- join_date는 기본값 SYSDATE로 설정
			        'ACTIVE'  -- 등록상태는 무조건 기본값으로는 ACTIVE로 설정
			        
		        )
		]]>
	</insert>
	
	<insert id="insertNewSeller" parameterType="sellerDTO">
		<![CDATA[
			insert into foodmate_seller(
					slr_id, 
			        pw, 
			        name,
			        nickname, 
			        business_no, 
			        email,
			        phone_num, 
			        join_date, 
			        status
		        )values(
			        #{slr_id}, 
			        #{password}, 
			        #{name}, 
			        #{nickname},
			        #{business_no}, 
			        #{email}, 
			        #{phone_num}, 
			        DEFAULT,   -- join_date는 기본값 SYSDATE로 설정
			        'ACTIVE'  -- 등록상태는 무조건 기본값으로는 ACTIVE로 설정
			        
		        )
		]]>
	</insert>
	
	<select id="selectOverlappedBuyerID" parameterType="String" resultType="String">
	   select decode(count(*),1, 'true', 0, 'false')
	   from foodmate_buyer
	   where byr_id = #{byr_id}
	</select>
	
	<select id="selectOverlappedSellerID" parameterType="String" resultType="String">
	   select decode(count(*),1, 'true', 0, 'false')
	   from foodmate_seller
	   where slr_id = #{slr_id}
	</select>

	<select id="selectFindBuyerID" parameterType="java.util.Map" resultType="String">
	   select byr_id
	   from foodmate_buyer
	   where name = #{name} and email = #{email}
	</select>
	
	<select id="selectFindSellerID" parameterType="java.util.Map" resultType="String">
	   select slr_id
	   from foodmate_seller
	   where name = #{name} and email = #{email}
	</select>
	
	<select id="selectFindBuyerPW" parameterType="java.util.Map" resultType="String">
	   select decode(count(*),1, 'true', 0, 'false')
	   from foodmate_buyer
	   where name = #{name} and email = #{email} and byr_id = #{byr_id}
	</select>
	
	<select id="selectFindSellerPW" parameterType="java.util.Map" resultType="String">
	   select decode(count(*),1, 'true', 0, 'false')
	   from foodmate_seller
	   where name = #{name} and email = #{email} and slr_id = #{slr_id}
	</select>
	
	<update id="updateResetBuyerPW" parameterType="buyerDTO">
	    <![CDATA[
			update foodmate_buyer
			       set pw=#{password}
		 	       where byr_id=#{byr_id}
			        and name=#{name}
			        and email=#{email}
    	]]>
	</update>
	
	<update id="updateBuyer" parameterType="buyerDTO">
	    <![CDATA[
			update foodmate_buyer
			       set pw=#{password},
			       name = #{name},
			       sex = #{sex},
			       email = #{email},
			       birth_6 = #{birth_6},
			       phone_num = #{phone_num}
		 	       where byr_id=#{byr_id}
    	]]>
	</update>
	
	<update id="updateSeller" parameterType="sellerDTO">
	    <![CDATA[
			update foodmate_seller
			       set pw=#{password},
			       name = #{name},
			       email = #{email},
			       phone_num = #{phone_num}
		 	       where slr_id=#{slr_id}
    	]]>
	</update>
	
	<update id="updateResetSellerPW" parameterType="sellerDTO">
	    <![CDATA[
			update foodmate_seller
			       set pw=#{password}
		 	       where slr_id=#{slr_id}
			        and name=#{name}
			        and email=#{email}
    	]]>
	</update>
	
	<update id="updateMemberdeleting" parameterType="buyerDTO">
	    <![CDATA[
			update foodmate_buyer
			       set status= 'DELETING'
		 	       where byr_id=#{byr_id}
			        and pw=#{password}
    	]]>
	</update>
	
	<!-- Admin 페이지 사용 -->
	
	<select id="selectAdminBuyerInfo" resultType="buyerDTO" parameterType="map">
		select fb.*, fbp.img_path
			from foodmate_buyer fb
			join foodmate_buyer_profile fbp on fb.byr_id = fbp.byr_id
			<if test="status != null and status != ''">
	        	<![CDATA[ WHERE fb.status = #{status} ]]>
	    	</if>
	    <choose>
		    <when test="searchtype == 'name' and keyword != null and keyword != ''">
		        <![CDATA[ AND fb.name LIKE '%' || #{keyword} || '%' ]]>
		    </when>
		    <when test="searchtype == 'email' and keyword != null and keyword != ''">
		        <![CDATA[ AND fb.email LIKE '%' || #{keyword} || '%' ]]>
		    </when>
		    <otherwise>
		        <!-- keyword가 없으면 조건 추가하지 않음 -->
		    </otherwise>
		</choose>
	</select>
	
	<update id="setActiveAdminBuyer" parameterType="String">
	    <![CDATA[
			update foodmate_buyer
			       set status='ACTIVE'
		 	       where byr_id=#{byr_id}
    	]]>
	</update>
	
	<delete id="deleteAdminBuyer" parameterType="String">
        DELETE FROM foodmate_buyer
        WHERE byr_id = #{byr_id}
    </delete>
    
    <select id="selectAdminSellerInfo" resultType="sellerDTO" parameterType="map">
	    SELECT 
	        fs.*,
	        fsp.img_path,
	        NVL(o.monthly_sales, 0) AS monthly_sales,  -- 이번 달 매출 (서브쿼리에서 미리 계산)
	        NVL(p.product_count, 0) AS product_count  -- 판매 상품 개수
	    FROM (
        -- 검색 조건을 먼저 적용하여 필요한 판매자만 선택
        SELECT *
        FROM foodmate_seller
        WHERE 1=1
        <if test="status != null and status != ''">
            AND status = #{status}
        </if>
        <choose>
            <when test="searchtype == 'name' and keyword != null and keyword != ''">
                AND name LIKE '%' || #{keyword} || '%'
            </when>
            <when test="searchtype == 'email' and keyword != null and keyword != ''">
                AND email LIKE '%' || #{keyword} || '%'
            </when>
        </choose>
	    ) fs
	    JOIN foodmate_seller_profile fsp 
	        ON fs.slr_id = fsp.slr_id
	    LEFT JOIN (
	        -- 판매된 상품 개수를 slr_id 기준으로 미리 계산
	        SELECT slr_id, COUNT(DISTINCT pdt_id) AS product_count
	        FROM foodmate_product
	        GROUP BY slr_id
	    ) p ON fs.slr_id = p.slr_id
	    LEFT JOIN (
	        -- 이번 달 매출을 slr_id 기준으로 미리 계산
	        SELECT slr_id, SUM(tot_pdt_price) AS monthly_sales
	        FROM foodmate_order
	        WHERE create_date >= TRUNC(SYSDATE, 'MM') -- 이번 달 주문만 필터링
	        GROUP BY slr_id
	    ) o ON fs.slr_id = o.slr_id
	    ORDER BY fs.slr_id DESC
	</select>
	
</mapper>