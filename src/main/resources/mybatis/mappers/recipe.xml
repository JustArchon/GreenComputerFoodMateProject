<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "../mybatis-3-mapper.dtd">

<mapper namespace="mapper.recipe">

    <!-- 레시피 추가 -->
    <insert id="insertRecipe" parameterType="recipeDTO">
        INSERT INTO FOODMATE_RECIPE (
            RCP_ID, 
            BYR_ID, 
            TITLE, 
            MAINIMG_PATH, 
            FOOD_NAME,
            CATEGORY_ID, 
            REQ_TIME, 
            DESCRIPTION
        ) 
        VALUES (
            FOODMATE_RECIPE_SEQ.NEXTVAL,  <!-- 시퀀스를 사용하여 RCP_ID 값 자동 생성 -->
            #{byr_id},                    <!-- 사용자 ID -->
            #{title},                     <!-- 레시피 제목 -->
            #{mainimg_path},              <!-- 레시피 이미지 경로 -->
            #{food_name},                 <!-- 음식 이름 -->
            #{category_id},				  <!-- 카테고리 아이디 -->
            #{req_time},                  <!-- 조리 시간 -->
            #{description}                <!-- 레시피 설명 -->
        )
    </insert>

    <!-- 생성된 RCP_ID 값을 반환하는 SELECT 쿼리 -->
    <select id="selectLastInsertedRecipeId" resultType="int">
        SELECT FOODMATE_RECIPE_SEQ.CURRVAL FROM DUAL
    </select>

    <!-- 재료 배치 삽입 -->
	<insert id="insertRecipeIngredients" parameterType="recipeIngredientDTO">
	    INSERT INTO FOODMATE_RECIPE_INGREDIENT (RCP_ID, INGRD_NAME, INGRD_QTY, UNIT, CATEGORY_ID)
	    VALUES (#{rcp_id}, #{ingrd_name}, #{ingrd_qty}, #{unit}, #{category_id})
	</insert>
	
	<!-- 단계별 조리법 배치 삽입 -->
	<insert id="insertRecipeSteps" parameterType="recipeStepDTO">
	    INSERT INTO FOODMATE_RECIPE_STEP (RCP_ID, RCP_STEP, STEP_DESC, STEPIMG_PATH)
	    VALUES (#{rcp_id}, #{rcp_step}, #{step_desc}, #{stepimg_path})
	</insert>
	
	

    <!-- 레시피 조회 -->
	<select id="selectRecipeList" resultType="recipeDTO">
	    SELECT 
	        R.RCP_ID, 
	        R.BYR_ID, 
	        BP.NICKNAME,  -- 닉네임 추가
	        R.CATEGORY_ID, 
	        R.TITLE, 
	        R.MAINIMG_PATH, 
	        R.FOOD_NAME, 
	        R.REQ_TIME, 
	        R.DESCRIPTION, 
	        R.STATUS, 
	        R.CREATE_DATE,
	        R.VIEWS,
	        COUNT(rr.rcp_id) AS REVIEW_COUNT,
	        ROUND(COALESCE(AVG(RR.RATING), 0), 1) AS RATING <!-- 평점이 없으면 0을 대신하고, 평균 평점 계산 (소수 첫째 자리에서 둘째자리를 기준 반올림)-->
	    FROM FOODMATE_RECIPE R
	    LEFT JOIN FOODMATE_BUYER_PROFILE BP ON R.BYR_ID = BP.BYR_ID  -- 닉네임 조인
	    LEFT JOIN FOODMATE_RECIPE_RATING RR ON R.RCP_ID = RR.RCP_ID  -- 평점 조인
	    WHERE R.STATUS = 'Y'
	    GROUP BY 
	        R.RCP_ID, R.BYR_ID, BP.NICKNAME, R.CATEGORY_ID, R.TITLE, 
	        R.MAINIMG_PATH, R.FOOD_NAME, R.REQ_TIME, R.DESCRIPTION, 
	        R.STATUS, R.CREATE_DATE, R.VIEWS
	    ORDER BY R.CREATE_DATE DESC -- 최신순 정렬
	</select>
	
		<!-- 대분류 카테고리 레시피 조회 -->
	<select id="selectRecipeByParent" resultType="recipeDTO">
	    SELECT 
	    R.RCP_ID, 
	    R.BYR_ID, 
	    BP.NICKNAME,
	    R.CATEGORY_ID, 
	    R.TITLE, 
	    R.MAINIMG_PATH, 
	    R.FOOD_NAME, 
	    R.REQ_TIME, 
	    R.DESCRIPTION, 
	    R.STATUS, 
	    R.CREATE_DATE,
	    ROUND(COALESCE(AVG(RR.RATING), 0), 1) AS RATING
	FROM FOODMATE_RECIPE R
	LEFT JOIN FOODMATE_BUYER_PROFILE BP ON R.BYR_ID = BP.BYR_ID
	LEFT JOIN FOODMATE_RECIPE_RATING RR ON R.RCP_ID = RR.RCP_ID
							<!-- ▼레시피 카테고리를 조회하는거지만 실질적으로 '카테고리 테이블'의 parent_id에 해당하는 중분류 카테고리와 일치해야해서 -->
	LEFT JOIN FOODMATE_RECIPE_CATEGORY C ON R.CATEGORY_ID = C.CATEGORY_ID 
	WHERE R.STATUS = 'Y' 
	AND C.PARENT_ID = #{parent_id}  -- 서브쿼리 대신 여기에서 직접 필터링
	GROUP BY 
	    R.RCP_ID, R.BYR_ID, BP.NICKNAME, R.CATEGORY_ID, R.TITLE, 
	    R.MAINIMG_PATH, R.FOOD_NAME, R.REQ_TIME, R.DESCRIPTION, 
	    R.STATUS, R.CREATE_DATE
	ORDER BY R.CREATE_DATE DESC
	
	</select>

	
	<!-- 중분류 카테고리의 레시피 조회 -->
	<select id="selectRecipeByChild" resultType="recipeDTO">
	    SELECT 
	        R.RCP_ID, 
	        R.BYR_ID, 
	        BP.NICKNAME,
	        R.CATEGORY_ID, 
	        R.TITLE, 
	        R.MAINIMG_PATH, 
	        R.FOOD_NAME, 
	        R.REQ_TIME, 
	        R.DESCRIPTION, 
	        R.STATUS, 
	        R.CREATE_DATE,
	        ROUND(COALESCE(AVG(RR.RATING), 0), 1) AS RATING
	    FROM FOODMATE_RECIPE R
	    LEFT JOIN FOODMATE_BUYER_PROFILE BP ON R.BYR_ID = BP.BYR_ID
	    LEFT JOIN FOODMATE_RECIPE_RATING RR ON R.RCP_ID = RR.RCP_ID
	    WHERE R.STATUS = 'Y' 
	    AND R.CATEGORY_ID = #{category_id}<!--등록된 레시피의 카테고리id랑 카테고리 항목클릭시 받아온 필드의 category_id가같은거끼리 --><!-- 중분류 카테고리로 필터링 -->
	    GROUP BY 
	        R.RCP_ID, R.BYR_ID, BP.NICKNAME, R.CATEGORY_ID, R.TITLE, 
	        R.MAINIMG_PATH, R.FOOD_NAME, R.REQ_TIME, R.DESCRIPTION, 
	        R.STATUS, R.CREATE_DATE
	    ORDER BY R.CREATE_DATE DESC
	</select>
	
	<!-- 평점순 레시피 조회 -->
	<select id="selectRecipeListByRating" resultType="recipeDTO">
	    SELECT 
	        R.RCP_ID, 
	        R.BYR_ID, 
	        BP.NICKNAME,  -- 닉네임 추가
	        R.CATEGORY_ID, 
	        R.TITLE, 
	        R.MAINIMG_PATH, 
	        R.FOOD_NAME, 
	        R.REQ_TIME, 
	        R.DESCRIPTION, 
	        R.STATUS, 
	        R.CREATE_DATE,
	        ROUND(COALESCE(AVG(RR.RATING), 0), 1) AS RATING <!-- 평점이 없으면 0을 대신하고, 평균 평점 계산 -->
	    FROM FOODMATE_RECIPE R
	    LEFT JOIN FOODMATE_BUYER_PROFILE BP ON R.BYR_ID = BP.BYR_ID  -- 닉네임 조인
	    LEFT JOIN FOODMATE_RECIPE_RATING RR ON R.RCP_ID = RR.RCP_ID  -- 평점 조인
	    WHERE R.STATUS = 'Y'
	    GROUP BY 
	        R.RCP_ID, R.BYR_ID, BP.NICKNAME, R.CATEGORY_ID, R.TITLE, 
	        R.MAINIMG_PATH, R.FOOD_NAME, R.REQ_TIME, R.DESCRIPTION, 
	        R.STATUS, R.CREATE_DATE
	    ORDER BY RATING DESC -- 평점순으로 내림차순 정렬
	</select>
	
	    <!-- 레시피 조회 -->
	<select id="searchRecipeList" resultType="recipeDTO" parameterType="map">
	    SELECT 
	        R.RCP_ID, 
	        R.BYR_ID, 
	        BP.NICKNAME,  -- 닉네임 추가
	        R.CATEGORY_ID, 
	        R.TITLE, 
	        R.MAINIMG_PATH, 
	        R.FOOD_NAME, 
	        R.REQ_TIME, 
	        R.DESCRIPTION, 
	        R.STATUS, 
	        R.CREATE_DATE,
	        R.VIEWS,
	        COUNT(rr.rcp_id) AS REVIEW_COUNT,
	        ROUND(COALESCE(AVG(RR.RATING), 0), 1) AS RATING <!-- 평점이 없으면 0을 대신하고, 평균 평점 계산 (소수 첫째 자리에서 둘째자리를 기준 반올림)-->
	    FROM FOODMATE_RECIPE R
	    LEFT JOIN FOODMATE_BUYER_PROFILE BP ON R.BYR_ID = BP.BYR_ID  -- 닉네임 조인
	    LEFT JOIN FOODMATE_RECIPE_RATING RR ON R.RCP_ID = RR.RCP_ID  -- 평점 조인
	    WHERE R.STATUS = 'Y'
	    <if test="keyword != null and keyword != ''">
	        <![CDATA[ AND R.FOOD_NAME LIKE '%' || #{keyword} || '%' ]]>
	    </if>
	    GROUP BY 
	        R.RCP_ID, R.BYR_ID, BP.NICKNAME, R.CATEGORY_ID, R.TITLE, 
	        R.MAINIMG_PATH, R.FOOD_NAME, R.REQ_TIME, R.DESCRIPTION, 
	        R.STATUS, R.CREATE_DATE, R.VIEWS
	    ORDER BY R.CREATE_DATE DESC -- 최신순 정렬
	</select>

	
	<!-- 레시피, 재료, 조리법 상세 조회 -->
	<select id="selectRecipeListByrID" resultType="recipeDTO" parameterType="String">
	        SELECT 
	        R.RCP_ID, 
	        R.BYR_ID, 
	        BP.NICKNAME,
	        R.CATEGORY_ID, 
	        R.TITLE, 
	        R.MAINIMG_PATH, 
	        R.FOOD_NAME, 
	        R.REQ_TIME, 
	        R.DESCRIPTION, 
	        R.STATUS, 
	        R.CREATE_DATE,
	        COUNT(rr.rcp_id) AS REVIEW_COUNT,
	        ROUND(COALESCE(AVG(RR.RATING), 0), 0) AS RATING <!-- 평점이 없으면 0을 대신하고, 평균 평점 계산 (소수 첫째 자리에서 둘째자리를 기준 반올림)-->
	    FROM FOODMATE_RECIPE R
	    LEFT JOIN FOODMATE_BUYER_PROFILE BP ON R.BYR_ID = BP.BYR_ID
	    LEFT JOIN FOODMATE_RECIPE_RATING RR ON R.RCP_ID = RR.RCP_ID  -- 평점 조인
	    WHERE R.BYR_ID = #{byr_id}
	    GROUP BY 
	        R.RCP_ID, R.BYR_ID, BP.NICKNAME, R.CATEGORY_ID, R.TITLE, 
	        R.MAINIMG_PATH, R.FOOD_NAME, R.REQ_TIME, R.DESCRIPTION, 
	        R.STATUS, R.CREATE_DATE
	    ORDER BY R.CREATE_DATE DESC -- 최신순 정렬
	</select>
	
	<select id="selectRecipeReviewByrIDList" resultType="RecipeRatingDTO" parameterType="String">
        SELECT 
		    rr.CMT_RCP_RATING_ID,  -- 댓글 ID
		    rr.RCP_ID,             -- 레시피 ID
		    rr.BYR_ID,             -- 작성자 ID
		    rr.RATING,             -- 평점
		    rr.COMMENTS,           -- 댓글 내용
		    rr.CREATE_DATE,        -- 작성일
		    rr.UPDATE_DATE,        -- 수정일
		    r.MAINIMG_PATH        -- 레시피 이미지 경로 (조인)
		FROM FOODMATE_RECIPE_RATING rr
		LEFT JOIN FOODMATE_RECIPE r ON rr.RCP_ID = r.RCP_ID
        WHERE rr.BYR_ID = #{byr_id}
	</select>
    
	<!-- 레시피, 재료, 조리법 상세 조회  + 닉네임 구매자 프로필 테이블에서 가져옴-->
	<select id="selectRecipeDetail" resultType="recipeDTO" parameterType="String">
	    SELECT R.*, BP.NICKNAME
	    FROM FOODMATE_RECIPE R
	    LEFT JOIN FOODMATE_BUYER_PROFILE BP
	    ON R.BYR_ID = BP.BYR_ID
	    WHERE R.RCP_ID = #{rcp_id}
	</select>
    
   	<select id="selectIngredientDetail" resultType="recipeIngredientDTO" parameterType="String">
        SELECT * 
        FROM FOODMATE_RECIPE_INGREDIENT
        WHERE RCP_ID = #{rcp_id}
	</select>
    
	<select id="selectStepDetail" resultType="recipeStepDTO" parameterType="String">
        SELECT * 
        FROM FOODMATE_RECIPE_STEP
        WHERE RCP_ID = #{rcp_id}
        ORDER BY RCP_STEP ASC
	</select>
	
	<!-- 레시피 카테고리 최상위만 가져온다. 레시피 등록할 때 필요 -->
	<select id="getGrandCategory" resultType="RecipeCategoryDTO">
	    SELECT CATEGORY_ID, NAME, PARENT_ID
	    FROM FOODMATE_RECIPE_CATEGORY
	    WHERE PARENT_ID IS NULL
	</select>
	
    <!-- 중분류 카테고리 조회 param값 받아오지않고 바로 페이지에서 출력할때 -->
    <select id="selectChildCategoryList" resultType="RecipeCategoryDTO">
        SELECT CATEGORY_ID, NAME, PARENT_ID
        FROM FOODMATE_RECIPE_CATEGORY
        WHERE PARENT_ID IS NOT NULL
    </select>
	<!-- 카테고리를 선택하면 그거에 해당하는 직계자식 카테고리만 가져온다. 상품등록할때 필요 -->
	<select id="getChildCategory" resultType="RecipeCategoryDTO" parameterType="java.lang.Integer">
		SELECT CATEGORY_ID, NAME, PARENT_ID
	    FROM FOODMATE_RECIPE_CATEGORY
	    WHERE PARENT_ID = #{parent_id}
	</select>

	<!-- 특정 상품의 카테고리를 부모까지 싹 가져온다 -->
	<select id="getCategoryStep" resultType="RecipeCategoryDTO">
	    SELECT CATEGORY_ID, NAME
	    FROM FOODMATE_RECIPE_CATEGORY
	    START WITH CATEGORY_ID = #{categoryId}
	    CONNECT BY PRIOR PARENT_ID = CATEGORY_ID
	    ORDER BY LEVEL DESC
	</select>
	
		<!-- 재료 카테고리 최상위만 가져오기 -->
	<select id="select_all_IngrdCategory" resultType="ProductCategoryDTO">
	    SELECT CATEGORY_ID, NAME, PARENT_ID
	    FROM FOODMATE_PRODUCT_category
	    WHERE PARENT_ID IS NULL
	</select>
	
	<!-- 카테고리를 선택하면 그거에 해당하는 직계자식 카테고리만 가져온다. 상품등록할때 필요 -->
	<select id="select_Child_IngrdCategory" resultType="ProductCategoryDTO" parameterType="java.lang.Integer">
		SELECT CATEGORY_ID, NAME, PARENT_ID
	    FROM FOODMATE_PRODUCT_CATEGORY
	    WHERE PARENT_ID = #{parentCategoryId}
	</select>
	
	<!-- 레시피 별점 및 후기 추가 -->
    <insert id="addRecipeRating" parameterType="RecipeRatingDTO">
        INSERT INTO FOODMATE_RECIPE_RATING
        (CMT_RCP_RATING_ID, RCP_ID, BYR_ID, RATING, COMMENTS, CREATE_DATE)
        VALUES
        (FOODMATE_RECIPE_RATING_SEQ.NEXTVAL, 
        #{rcp_id}, 
        #{byr_id}, 
        #{rating}, 
        #{comments}, 
        SYSDATE)
    </insert>
    
        <!-- 이미 후기가 작성되었는지 확인 -->
    <select id="alreadyExistRating" parameterType="map" resultType="int">
        SELECT COUNT(*) 
        FROM FOODMATE_RECIPE_RATING
        WHERE RCP_ID = #{rcpId} AND BYR_ID = #{byrId}
    </select>
    
    
    <resultMap id="RecipeRatingMap" type="RecipeRatingDTO">
	    <result property="cmt_rcp_rating_id" column="CMT_RCP_RATING_ID"/>
	    <result property="rcp_id" column="RCP_ID"/>
	    <result property="byr_id" column="BYR_ID"/>
	    <result property="rating" column="RATING"/>
	    <result property="comments" column="COMMENTS"/>
	    <result property="create_date" column="CREATE_DATE"/>
	    <result property="nickname" column="NICKNAME"/>
	    <result property="img_path" column="IMG_PATH"/>
	</resultMap>
	
    <!-- 레시피에 해당하는 모든 후기 조회 -->
    <select id="getRatingsByRecipeId" resultMap="RecipeRatingMap">
    SELECT 
        rr.CMT_RCP_RATING_ID,  
        rr.RCP_ID,
        rr.BYR_ID,
        rr.RATING,
        rr.COMMENTS,
        rr.CREATE_DATE,
        rr.UPDATE_DATE,  
        bp.NICKNAME,
        bp.IMG_PATH
    FROM FOODMATE_RECIPE_RATING rr
    JOIN FOODMATE_BUYER_PROFILE bp 
    ON rr.BYR_ID = bp.BYR_ID
    WHERE rr.RCP_ID = #{rcp_id}
    ORDER BY rr.CREATE_DATE DESC
	</select>
	
	<!-- 레시피 후기 수정-->
	<update id="updateRecipeRating" parameterType="RecipeRatingDTO">
    UPDATE FOODMATE_RECIPE_RATING
    SET 
        RATING = #{rating}, 
        COMMENTS = #{comments},
        UPDATE_DATE = SYSDATE
    WHERE CMT_RCP_RATING_ID = #{cmt_rcp_rating_id}
	</update>
	
	<!-- 레시피 후기 삭제 -->
    <delete id="deleteRecipeRating" parameterType="RecipeRatingDTO">
    DELETE FROM FOODMATE_RECIPE_RATING
    WHERE CMT_RCP_RATING_ID = #{cmt_rcp_rating_id}
	</delete>
	
	<!-- 레시피 질문 등록 -->
	<insert id="addRecipeQna" parameterType="RecipeQnaDTO">
    INSERT INTO FOODMATE_RECIPE_QNA (
        CMT_RCP_QNA_ID, 
        RCP_ID, 
        BYR_ID, 
        COMMENTS, 
        CREATE_DATE
    ) VALUES (
        FOODMATE_RECIPE_QNA_SEQ.NEXTVAL, 
        #{rcp_id},  
        #{byr_id},  
        #{comments},  <!-- 질문 댓글 -->
        SYSDATE 
    )
	</insert>
	
	<resultMap id="RecipeQnaMap" type="RecipeQnaDTO">
    <result property="cmt_rcp_qna_id" column="CMT_RCP_QNA_ID"/>
    <result property="rcp_id" column="RCP_ID"/>
    <result property="byr_id" column="BYR_ID"/>
    <result property="comments" column="COMMENTS"/>
    <result property="parent_id" column="PARENT_ID"/>
    <result property="create_date" column="CREATE_DATE"/>
    <result property="update_date" column="UPDATE_DATE"/>
    <result property="nickname" column="NICKNAME"/>
    <result property="img_path" column="IMG_PATH"/>
	</resultMap>

	<!-- 레시피 질문/답변테이블에서 parent_id가 NULL 또는 0인 질문만 조회 -->
	<select id="getQnasByRecipeId" resultMap="RecipeQnaMap">
	    SELECT 
	        rq.CMT_RCP_QNA_ID, 
	        rq.RCP_ID, 
	        rq.BYR_ID, 
	        rq.COMMENTS, 
	        rq.PARENT_ID,
	        rq.CREATE_DATE, 
	        rq.UPDATE_DATE,  
	        bp.NICKNAME, 
	        bp.IMG_PATH
	    FROM FOODMATE_RECIPE_QNA rq
	    JOIN FOODMATE_BUYER_PROFILE bp 
	    ON rq.BYR_ID = bp.BYR_ID
	    WHERE rq.RCP_ID = #{rcp_id} 
	    AND (rq.PARENT_ID IS NULL OR rq.PARENT_ID = 0)
	    ORDER BY rq.CREATE_DATE DESC
	</select>
	
	<!-- 레시피 질문/답변테이블에서 parent_id가 있는 답변만 조회 -->
	<select id="getAnswersByRecipeId" resultMap="RecipeQnaMap">
	    SELECT 
	        rq.CMT_RCP_QNA_ID, 
	        rq.RCP_ID, 
	        rq.BYR_ID, 
	        rq.COMMENTS, 
	        rq.PARENT_ID,
	        rq.CREATE_DATE, 
	        rq.UPDATE_DATE,  
	        bp.NICKNAME, 
	        bp.IMG_PATH
	    FROM FOODMATE_RECIPE_QNA rq
	    JOIN FOODMATE_BUYER_PROFILE bp 
	    ON rq.BYR_ID = bp.BYR_ID
	    WHERE rq.RCP_ID = #{rcp_id} 
	    AND rq.PARENT_ID IS NOT NULL 
	    ORDER BY rq.CREATE_DATE ASC
	</select>
	
	<!-- 레시피 답변 등록 -->
	<insert id="addRecipeQnaAnswer" parameterType="RecipeQnaDTO">
    INSERT INTO FOODMATE_RECIPE_QNA (CMT_RCP_QNA_ID, RCP_ID, BYR_ID, COMMENTS, PARENT_ID, CREATE_DATE)
    VALUES (FOODMATE_RECIPE_QNA_SEQ.NEXTVAL, 
            #{rcp_id}, 
            #{byr_id}, 
            #{comments}, 
            #{parent_id}, 
            SYSDATE)
	</insert>
	
	<!-- 레시피 조회수 더하기-->
	<update id="updateRecipeViews" parameterType="int">
	    UPDATE FOODMATE_RECIPE
	    SET 
	        views = views + 1
	    WHERE rcp_id = #{rcp_id}
	</update>
	
		<!-- 레시피 질문,답변 수정 -->
	<update id="updateRecipeQna" parameterType="RecipeQnaDTO">
	    UPDATE FOODMATE_RECIPE_QNA
	    SET 
	        COMMENTS = #{comments},
	        UPDATE_DATE = SYSDATE
	    WHERE CMT_RCP_QNA_ID = #{cmt_rcp_qna_id}
	</update>
	
	<!-- 레시피 질문,답변 삭제 -->
	<delete id="deleteRecipeQna" parameterType="RecipeQnaDTO">
	    DELETE FROM FOODMATE_RECIPE_QNA
	    WHERE CMT_RCP_QNA_ID = #{cmt_rcp_qna_id}
	</delete>

</mapper>
