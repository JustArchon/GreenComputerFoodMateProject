메인: 어드민 페이지

사이드
-> 식재료 통합구매 레시피접기피기
-> 아이디 중복확인시 셀러, 구매자 둘다검사
-> 사업자번호 인증 후 가입되게
-> 판매자 페이지 프로파일, 매출확인
-> 식재료 옆에 카카오지도넣고 내주변 마트표시


되야하는것
-> 쇼핑리뷰
-> 식재료 평균레이팅 표시

우선도매우낮음
-> 쿠폰 날짜선택 로그확인, , 조회기간 구현[난이도너무높음]



장바구니

포인트 결제

결제 포인트 사용 반영
세션내 사용한값 제거

마이페이지 픽스내용

취소/반품/교환 내역

환불/입금 내역


-주문
DB 삽입

페이지에따라서 레시피 작성 or 판매등록 [구매자는 판매등록 미표시] - 뼈대완성

레시피 조회수, 좋아요 기능 추가, 닉네임 저장 추가

일부 유동성 데이터 VO -> DTO이름변경

-마이페이지

-메인
찜 목록
최근 본 상품[product제한]

- 배송지 관리
배송지 추가

- 주문 페이지
DB등록

- 내정보관리

- 쇼핑관리, 마이페이지 고객센터,  메이트관리, 혜택관리[쿠폰 DB부터]

-버그픽스 사항
판매자로그인후 구매자재로그인가능

- 향후 할것
비밀번호 찾기시 메일인증후 재설정

회원탈퇴 -> 회원탈퇴 메시지 꾸미기

DB수정

로그인 함수 합치기

로그인 프로세스 프로시저 이용

찜목록

회원가입


결제수단 추가(기존 회원가입폼), 배송조회팝업

DB ID,PW 이름통일

        let pointData = {
            slr_id: slrId,       // 판매자 ID (예제)
            ord_code: ordCode, // 주문 코드 (예제)
            amount: pdtPrice, // 상품 가격 기준으로 5% 포인트 적립
            point_type: "상품 구매"  // 포인트 적립 유형
        };

CREATE TABLE FOODMATE_BUYER_ADDRESS (
    ADDR_ID NUMBER PRIMARY KEY,  -- 시퀀스 적용할 것
    BYR_ID VARCHAR2(50) NOT NULL,
    ADDR_NICKNAME VARCHAR2(10),
    POSTAL_CODE CHAR(5) NOT NULL,
    ADDR VARCHAR2(255) NOT NULL,
    ADDR_DETAIL VARCHAR2(255),
    TO_NAME VARCHAR2(50) NOT NULL,
    TO_PHONE_NUM VARCHAR2(15) NOT NULL,
    IS_BASE_ADDR CHAR(1) DEFAULT 'N' CHECK (IS_BASE_ADDR IN ('Y', 'N')),
    CONSTRAINT FK_BUYER FOREIGN KEY (BYR_ID)
REFERENCES FOODMATE_BUYER (BYR_ID)
ON DELETE CASCADE
);


CREATE TABLE FOODMATE_ORDER (
    ORD_ID NUMBER,
    BYR_ID VARCHAR2(50),
    SLR_ID VARCHAR2(50),
    TOT_PDT_PRICE NUMBER,
    SHIP_FEE NUMBER,
    ORD_STAT CHAR(1),
    CREATE_DATE DATE DEFAULT SYSDATE,
    DEL_CODE VARCHAR2(50),
    WAYBILL_NUM VARCHAR2(50),
    PRIMARY KEY (ORD_ID),  -- 기본키 설정
    CONSTRAINT FK_ORDER_BUYER FOREIGN KEY (BYR_ID) REFERENCES FOODMATE_BUYER (BYR_ID) ON DELETE SET NULL,  -- 구매자 ID 외래키 (삭제 시 SET NULL)
    CONSTRAINT FK_ORDER_SELLER FOREIGN KEY (SLR_ID) REFERENCES FOODMATE_SELLER (SLR_ID) ON DELETE SET NULL  -- 판매자 ID 외래키 (삭제 시 SET NULL)
);

CREATE TABLE FOODMATE_PAYMENT (
    PAY_ID NUMBER,  -- 결제 ID (기본키, 시퀀스 사용)
    ORD_ID NUMBER,  -- 주문 ID (주문 테이블의 주문ID 외래키, 삭제 시 null)
    PG_ID VARCHAR2(100), -- 결제 API에서 발급한 고유 ID (환불 절차 등, 정확한 결제내역 확인에필요)
    PAY_METHOD VARCHAR2(50),  -- 결제 수단 (외래키 없이 결제 수단명 저장)
    PAY_STATUS CHAR(1),  -- 결제 상태 (0 = 대기중, 1 = 성공, 2 = 취소, 3 = 환불)
    PAY_DATE DATE,  -- 결제일 (디폴트 SYSDATE)
    PRIMARY KEY (PAY_ID),  -- 결제 ID를 기본키로 설정
    CONSTRAINT FK_PAYMENT_ORDER FOREIGN KEY (ORD_ID) REFERENCES FOODMATE_ORDER (ORD_ID) ON DELETE SET NULL  -- 주문 테이블 외래키
);


CREATE TABLE FOODMATE_ORDER_ADDRESS (
    ORD_ID NUMBER,  -- 주문 ID (기본키, "주문 테이블"의 주문ID 외래키)
    POSTAL_CODE CHAR(5),  -- 우편번호
    ADDR VARCHAR2(255),  -- 배송지 주소
    ADDR_DETAIL VARCHAR2(255),  -- 배송지 상세 주소
    TO_NAME VARCHAR2(50),  -- 수령인 성함
    TO_PHONE_NUM VARCHAR2(15),  -- 수령인 전화번호
    PRIMARY KEY (ORD_ID),  -- 기본키 설정
    CONSTRAINT FK_ORDER_ADDRESS FOREIGN KEY (ORD_ID) REFERENCES FOODMATE_ORDER (ORD_ID) ON DELETE CASCADE  -- "주문 테이블"의 주문ID 외래키
);

INIpayTest
inicis~1111

		let birthYearInput = document.getElementById("birthyy");
	    let hiddenSexInput = document.getElementById("hiddenSex");
	    let sex = "<c:out value='${buyerInfo.getSex()}'/>"; // 서버에서 받은 성별 값
	    
	    let birthYear = parseInt(birthYearInput.value);
	    
	 // 출생년도 기준으로 hiddenSex 값 설정
	    if (birthYear >= 2000) {
	    	hiddenSexInput.value = (sex === "3" || sex === "4") ? sex : "3"; // 기존 값 유지, 기본값 3
	    } else {
	    	hiddenSexInput.value = (sex === "1" || sex === "2") ? sex : "1"; // 기존 값 유지, 기본값 1
	    }

$(document).ready(function() {
    $("#btn-add-selected-cart").click(function() {
        let selectedIds = getSelectedProductIds();
        if (selectedIds.length === 0) {
            alert("장바구니로 옮길 상품을 선택하세요.");
            return;
        }

        $.ajax({
            url: "addSelectedToCart",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ productIds: selectedIds }),
            success: function(response) {
                alert("선택한 상품이 장바구니로 이동되었습니다.");
                $(".wish-checkbox:checked").closest("tr").remove(); // 위시리스트에서 삭제
            },
            error: function() {
                alert("장바구니 이동에 실패했습니다.");
            }
        });
    });
});

$(document).ready(function() {
    $("#btn-delete-selected").click(function() {
        let selectedIds = getSelectedProductIds();
        if (selectedIds.length === 0) {
            alert("삭제할 상품을 선택하세요.");
            return;
        }

        if (!confirm("선택한 상품을 삭제하시겠습니까?")) return;

        $.ajax({
            url: "deleteSelectedWishlist",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ productIds: selectedIds }),
            success: function(response) {
                alert("선택한 상품이 삭제되었습니다.");
                $(".wish-checkbox:checked").closest("tr").remove(); // UI에서도 삭제
            },
            error: function() {
                alert("삭제에 실패했습니다.");
            }
        });
    });
});

function getSelectedProductIds() {
    let selectedIds = [];
    $(".wish-checkbox:checked").each(function() {
        let productId = $(this).closest("tr").data("id");
        if (productId) {
            selectedIds.push(productId);
        }
    });
    return selectedIds;
}

.sidebar {
  width: 250px; /* 사이드바 너비 */
  height: 100vh; /* 화면 높이에 맞게 설정 */
  
  background-color: #f4f4f4;
  padding: 20px;
}


-- 기타 문의 이미지 테이블
CREATE TABLE GEN_INQUIRY_IMAGES (
    GEN_INQ_IMG_ID NUMBER(10) PRIMARY KEY,         -- 기타 문의 이미지 ID
    GEN_INQ_ID NUMBER(10) NOT NULL,                -- 기타 문의 ID (외래키)
    IMAGE_PATH VARCHAR2(255) NOT NULL,             -- 이미지 경로
    CRE_DATE DATE DEFAULT SYSDATE,                 -- 이미지 업로드일
    FOREIGN KEY (GEN_INQ_ID) REFERENCES GEN_INQUIRIES(GEN_INQ_ID) -- 기타 문의 테이블 외래키
);

CREATE SEQUENCE gen_inquiry_img_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

      				<tr>
			      	  <td>${pointlog.created_at}</td>
			          <td>${pointlog.point_type}</td>
			          <td>${pointlog.description}</td>
			          <td>${pointlog.valid_until} 까지</td>
			          <td>${pointlog.amount}원</td>
			        </tr>


<span class="point-info">(보유 적립금 : <span id="available-points">${buyerInfo.points}</span> 원)</span>

<td>${pointlog.point_type}</td>
<td>
    ${pointlog.amount}원
    
</td>

